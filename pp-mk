#!/usr/bin/env bash

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

source "$DIR/pp-common"

help() {
	echo 'pp-mk: Wrapper around pyvenv and pyenv'
	echo ''
	echo '    pp-mk <env_name> [python_version]'
	echo ''
	echo 'All switches are passed to pyvenv. Type pyvenv -h for details.'
	echo 'env_version is a pyenv version to base the new environment on, if available. Type pyenv for more details.'
	exit 0
}

fatal() {
	echo "ERROR: $@" >&2
	exit 1
}

args=()
env_name=
python_version=
for arg in "$@"; do
	if [[ "${arg:0:1}" != '-' ]]; then
		if [[ -z $env_name ]]; then
			env_name="$arg"
		elif [[ -z $python_version ]]; then
			python_version="$arg"
		else
			fatal "Too many arguments. You can only supply one env name."	
		fi
	elif [[ "$arg" = '-h' || "$arg" = '--help' ]]; then
		help
	else
		args+=($arg)
	fi
done

if [[ ! -z ${python_version} ]]; then
	python_path=$(PYENV_VERSION=${python_version} pyenv which python)
	if [[ "$?" != 0 ]]; then
		exit 1
	fi
	export PATH="$(dirname $python_path):$PATH"
fi

natural_env_name=${PWD##*/}

if [[ -z "$env_name" ]]; then
	env_name=${PWD##*/}
	echo "Auto-detected env name: $env_name"
fi

env_path="${PP_ENVS_DIR}/${env_name}"
if [[ -d "$env_path" ]]; then
	fatal "Virtual env \"$env_name\" already exists"
fi

if [[ "$env_name" != "$natural_env_name" ]]; then
	echo "$env_name" > ${PP_NAME_FILE}
	echo "Virtual env name saved into ${PP_NAME_FILE}"

	if [[ -f .gitignore ]]; then
		echo -e "\n\n#PaPy Tools env file\n/${PP_NAME_FILE}\n" >> .gitignore
		echo "\"${PP_NAME_FILE}\" added to .gitignore"
	fi
fi

echo "Based on $(python -V)"
$env_cmd pyvenv ${args[@]} "$env_path"
